(define (positive x) (>= x 0))

(define (negative x) (<= x 0))

(define (mul-interval x y)
  (let ((xl (lower-bound x))
        (xu (upper-bound x))
        (yl (lower-bound y))
        (yu (upper-bound y)))
    (cond ((and (positive xl) (positive xu) (positive yl) (positive yu))
           (make-interval (* xl yl) (* xu yu)))
          ((and (positive xl) (positive xu) (negative yl) (positive yu))
           (make-interval (* xu yl) (* xu yu)))
          ((and (positive xl) (positive xu) (negative yl) (negative yu))
           (make-interval (* xu yl) (* xl yu)))
          ((and (negative xl) (positive xu) (positive yl) (positive yu))
           (make-interval (* xl yu) (* xu yu)))
          ((and (negative xl) (negative xu) (negative yl) (negative yu))
           (make-interval (* xu yu) (* xl yl)))
          ((and (negative xl) (positive xu) (negative yl) (negative yu))
           (make-interval (* xu yl) (* xl yl)))
          ((and (negative xl) (negative xu) (negative yl) (positive yu))
           (make-interval (* xl yu) (* xl yl)))
          ((and (negative xl) (negative xu) (positive yl) (positive yu))
           (make-interval (* xl yu) (* xu yl)))
          (else
           (make-interval (min (* xl yu) (* xu yl))
                          (max (* xl yl) (* xu yu)))))))
